{"version":3,"sources":["App.js","serviceWorker.js","index.js","assets/myface.jpg"],"names":["Navigation","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Link","to","NavDropdown","title","Item","Divider","Form","inline","FormControl","type","placeholder","Button","variant","JumbotronPage","src","md","fab","icon","size","Contact","htmlFor","rows","color","outline","far","Card","style","width","Img","myface","Body","Title","Text","Jumbofun","Jumbotron","Imagecard","Home","App","atEnter","opacity","atLeave","atActive","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.07230801.chunk.js","sourcesContent":["import React from 'react';\nimport { Button, Navbar, NavDropdown, Form, FormControl, Nav, Jumbotron, Card } from 'react-bootstrap';\nimport { MDBContainer, MDBRow, MDBCol, MDBBtn, MDBIcon } from 'mdbreact';\nimport { MDBJumbotron,  MDBCardTitle, MDBCardImage, MDBCardBody, MDBCardText } from \"mdbreact\";\n\n\n\nimport myface from \"./assets/myface.jpg\"\nimport { HashRouter as Router, Route, Link } from \"react-router-dom\";\nimport { AnimatedSwitch } from 'react-router-transition';\n\nimport './App.css';\n\n\nconst Navigation = () => {\n\n  return (\n\n    <div>\n      <Navbar bg=\"light\" expand=\"lg\">\n        <Navbar.Brand href=\"#home\">My portfolio and stuff</Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n          <Nav className=\"mr-auto\">\n            <Nav.Link> <Link to=\"/\"> home</Link></Nav.Link>\n            <Nav.Link > <Link to=\"/contact\" > contact </Link></Nav.Link>\n            <NavDropdown title=\"Dropdown\" id=\"basic-nav-dropdown\">\n              <NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>\n              <NavDropdown.Item href=\"#action/3.2\">Another action</NavDropdown.Item>\n              <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>\n              <NavDropdown.Divider />\n              <NavDropdown.Item href=\"#action/3.4\">Separated link</NavDropdown.Item>\n            </NavDropdown>\n          </Nav>\n          <Form inline>\n            <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\n            <Button variant=\"outline-success\">Search</Button>\n          </Form>\n        </Navbar.Collapse>\n      </Navbar>\n\n    </div>\n  )\n}\n\nconst JumbotronPage = () => {\n  return (\n    <MDBContainer className=\"mt-5 text-center\">\n      <MDBRow>\n        <MDBCol>\n          <MDBJumbotron className=\"text-center\">\n            <MDBCardTitle className=\"card-title h4 pb-2\">\n              <strong>Hipster bullshit</strong>\n            </MDBCardTitle>\n\n            <MDBCardImage\n              src=\"https://mdbootstrap.com/img/Photos/Slides/img%20(70).jpg\"\n              className=\"img-fluid\"\n            />\n            <MDBCardBody>\n              <MDBCardTitle className=\"indigo-text h5 m-4\">\n                Please like me \n              </MDBCardTitle>\n              <MDBCardText>\n                Sed ut perspiciatis unde omnis iste natus sit voluptatem\n                accusantium doloremque laudantium, totam rem aperiam.\n              </MDBCardText>\n\n              <MDBCol className=\"d-flex justify-content-center mt-4\" md=\"12\">\n                <MDBCol md=\"3\" className=\"d-flex justify-content-around\">\n                  <a href=\"google.com\"><MDBIcon\n                    fab\n                    icon=\"linkedin-in\"\n                    className=\"grey-text\"\n                    size=\"lg\"\n                  /></a>\n                  <a href=\"twitter.com\"><MDBIcon\n                    fab\n                    icon=\"twitter\"\n                    className=\"grey-text\"\n                    size=\"lg\"\n                  /></a>\n                  <a href=\"facebook.com\"><MDBIcon\n                    fab\n                    icon=\"facebook-f\"\n                    className=\"grey-text\"\n                    size=\"lg\"\n                  /></a>\n                </MDBCol>\n              </MDBCol>\n\n            </MDBCardBody>\n          </MDBJumbotron>\n        </MDBCol>\n      </MDBRow>\n    </MDBContainer>\n  )\n  }\nconst Contact = () => {\n  return (\n    <>\n     <Jumbofun/>\n      <MDBContainer>\n        <MDBRow>\n          <MDBCol md=\"6\">\n            <form>\n              <p className=\"h4 text-center mb-4\">Write to us</p>\n              <label htmlFor=\"defaultFormContactNameEx\" className=\"grey-text\">\n                Your name\n            </label>\n              <input\n                type=\"text\"\n                id=\"defaultFormContactNameEx\"\n                className=\"form-control\"\n              />\n              <br />\n              <label htmlFor=\"defaultFormContactEmailEx\" className=\"grey-text\">\n                Your email\n            </label>\n              <input\n                type=\"email\"\n                id=\"defaultFormContactEmailEx\"\n                className=\"form-control\"\n              />\n              <br />\n              <label\n                htmlFor=\"defaultFormContactSubjectEx\"\n                className=\"grey-text\"\n              >\n                Subject\n            </label>\n              <input\n                type=\"text\"\n                id=\"defaultFormContactSubjectEx\"\n                className=\"form-control\"\n              />\n              <br />\n              <label\n                htmlFor=\"defaultFormContactMessageEx\"\n                className=\"grey-text\"\n              >\n                Your message\n            </label>\n              <textarea\n                type=\"text\"\n                id=\"defaultFormContactMessageEx\"\n                className=\"form-control\"\n                rows=\"3\"\n              />\n              <div className=\"text-center mt-4\">\n                <MDBBtn color=\"warning\" outline type=\"submit\">\n                  Send\n                <MDBIcon far icon=\"paper-plane\" className=\"ml-2\" />\n                </MDBBtn>\n              </div>\n            </form>\n          </MDBCol>\n        </MDBRow>\n      </MDBContainer>\n\n      <Card className=\"facecard\" style={{ width: '18rem' }}>\n        <Card.Img variant=\"top\" src={myface} />\n        <Card.Body>\n          <Card.Title>My face</Card.Title>\n          <Card.Text>\n            I like stuff and things related to that.\n          </Card.Text>\n          <Button href=\"https://www.google.com\">check my linkd in brah</Button>\n        </Card.Body>\n      </Card>\n    </>\n  )\n}\nconst Jumbofun = () => {\n  return (\n\n    <Jumbotron className=\"jumbofun\">\n      <h1>PROFESSIONAL AS FUCKKKKKK</h1>\n      <p>\n        monotonectally target world-class networks\n      </p>\n     \n    </Jumbotron>\n  )\n}\n\n\n\n\nconst Imagecard = () => {\n  return (\n    <div>hi</div>\n  )\n}\n\n\nconst Home = () => {\n  return (\n    <>\n    \n      <Jumbofun />\n      <Imagecard />\n    <JumbotronPage/>\n\n    </>\n  )\n}\n\nconst App = () => {\n  return (\n    <Router>\n\n      <Navigation />\n\n      <AnimatedSwitch\n        atEnter={{ opacity: 0, }}\n        atLeave={{ opacity: 0, }}\n        atActive={{ opacity: 1, }}\n        className=\"switch-wrapper\"\n      >\n        <Route path=\"/\" exact component={Home} />\n        <Route path=\"/contact\" component={Contact} />\n\n      </AnimatedSwitch>\n    </Router>\n  );\n\n  \n\n\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/myface.69fb3cf8.jpg\";"],"sourceRoot":""}